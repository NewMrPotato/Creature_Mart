# –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import sqlite3

# aiogram
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types, F

# –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
from handlers.users.different_functions import delete_last_messages
from handlers.users.profile import show_profile_text_request
from keyboards.default.reply_buttons import profile_keyboard
from keyboards.inline import capture_keyboard
from keyboards.inline.inline_buttons import emojis, user_acceptation_inline_keyboard, \
    way_to_increase_balance_inline_keyboard, back_to_profile_buttons, back_to_profile_inline_keyboard
from loader import router, dp, bot

# –¥—Ä—É–≥–∏–µ
import random
import os


with open('data/text/config.txt', 'r') as f:
    lines = f.readlines()

minimal_sum = 52

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã
sum_to_increase_balance = 0

elected_emoji = 'üü®'
user_acceptation_url = lines[3].split('\\')[0].replace(' ', '')

outputting_money_user_id = None
acceptation_outputting_money_code = None

seller_id = None
selling_price = None
selling_creature_id = None

admins_id = [int(i) for i in lines[1].split('\\')[0].replace(' ', '').split(',')]

# –≠—Ç–æ –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å
#admins_id.append(int(os.getenv("ID")))

first_tutor_id = int(lines[4].split('\\')[0].replace(' ', '').split(',')[0])
second_tutor_id = int(lines[4].split('\\')[0].replace(' ', '').split(',')[1])
first_tutor_link = lines[2].split('\\')[0].replace(' ', '').split(',')[0]
second_tutor_link = lines[2].split('\\')[0].replace(' ', '').split(',')[1]
acceptation_selling_code = None


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è sum_to_increase_balance
# {
async def turn_off_sum_balance():
    global sum_to_increase_balance
    sum_to_increase_balance = 0


async def get_sum_balance():
    return sum_to_increase_balance

# }


def link_to_website():
    return f'üìÉ–ü–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n\n' \
           f'–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è, –≤—ã —Å–æ–≥–ª–∞—â–∞–µ—Ç–µ—Å—å —Å <a href="{user_acceptation_url}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>'


async def send_message_with_link(chat_id):
    linked_text = link_to_website()
    await bot.send_message(chat_id, linked_text, parse_mode=ParseMode.HTML,
                           reply_markup=user_acceptation_inline_keyboard)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–≥–æ –ª–∏–±–æ
@dp.message(Command("test"))
async def cmd_settimer(message: Message, command: CommandObject):
    await message.answer('English or Spanish?')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def message_handler(message: types.Message):
    global sum_to_increase_balance, acceptation_selling_code, seller_id, selling_price,\
        selling_creature_id, outputting_money_user_id, acceptation_outputting_money_code

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('data/database/database_shop.sqlite')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT status FROM users WHERE tg_id = ?", (message.from_user.id,))

    result = cursor.fetchone()
    user_status = ''

    if result is not None:
        user_status = result[0]

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    if message.text == '/admin' and message.from_user.id in admins_id:
        await message.answer(f'–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–æ–≤:\n\n'
                             f'1) –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n'
                             f'bi/—Ç–µ–ª–µ–≥—Ä–∞–º id/—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                             f'2) –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'users\n\n'
                             f'3)  –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ Creature –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'creature/—Ç–µ–ª–µ–≥—Ä–∞–º id\n\n'
                             f'4) –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'blacklist/—Ç–µ–ª–µ–≥—Ä–∞–º id\n'
                             f'(–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ)\n\n'
                             f'5) –ß—Ç–æ–±—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'verify/—Ç–µ–ª–µ–≥—Ä–∞–º id')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    elif message.text.split('/')[0] == 'gettable' and message.from_user.id in admins_id:

        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM {message.text.split('/')[1]}")
        rows = cursor.fetchall()

        table_str = ""
        for row in rows:
            table_str += " | ".join(str(cell) for cell in row) + "\n"

        conn.close()

        MAX_MESSAGE_LENGTH = 4000

        if len(table_str) > MAX_MESSAGE_LENGTH:
            parts = [table_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(table_str), MAX_MESSAGE_LENGTH)]
        else:
            parts = [table_str]

        for part in parts:
            await message.answer(part)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    elif message.text.split('/')[0] == 'users' and message.from_user.id in admins_id:

        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM users")
        rows = cursor.fetchall()

        table_str = ''

        for row in rows:
            status = ''
            if not (bool(row[3])):
                status = 'üî¥–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
            else:
                status = 'üü¢–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

            table_str += f'–ü—Ä–æ—Ñ–∏–ª—å: #{row[0]}\n' \
                         f'–ë–∞–ª–∞–Ω—Å: {row[1]} RUB\n' \
                         f'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {status}\n' \
                         f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {row[4]}\n' \
                         f'Username: @{row[5]} \n\n'

        conn.close()

        MAX_MESSAGE_LENGTH = 4000

        if len(table_str) > MAX_MESSAGE_LENGTH:
            parts = [table_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(table_str), MAX_MESSAGE_LENGTH)]
        else:
            parts = [table_str]

        for part in parts:
            await message.answer(part)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ creatures –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif message.text.split('/')[0] == 'creature' and message.from_user.id in admins_id:
        # –ë—É–¥–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –æ—à–∏–±–∫–∞ –ª–∏–±–æ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º id –ª–∏–±–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ creature
        try:
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            cursor.execute(f"SELECT creature_list FROM user_creature WHERE user_id = ?", (int(message.text.split('/')[1]),))
            creature_ids = cursor.fetchall()[0][0].split(',')

            creature_info = []

            for i in creature_ids:
                cursor.execute(f"SELECT * FROM creatures WHERE id = ?", (int(i),))
                result = cursor.fetchall()[0]

                creature_info.append([str(j) for j in result])

            user_id_loc = message.text.split('/')[1]
            table_str = f'–ü—Ä–æ—Ñ–∏–ª—å: #{user_id_loc}\n\n'

            for creature in creature_info:
                table_str += f'Creature id: {creature[0]}\n' \
                             f'–ù–æ–º–µ—Ä Creature: {creature[1]}\n' \
                             f'–ö–æ–ª–ª–µ–∫—Ü–∏—è: {creature[2]}\n' \
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ: {creature[3]}\n' \
                             f'–¶–≤–µ—Ç: {creature[4]}\n' \
                             f'–¶–µ–Ω–∞: {creature[5]} RUB\n\n'

            conn.close()

            MAX_MESSAGE_LENGTH = 4000

            if len(table_str) > MAX_MESSAGE_LENGTH:
                parts = [table_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(table_str), MAX_MESSAGE_LENGTH)]
            else:
                parts = [table_str]

            for part in parts:
                await message.answer(part)
        except Exception as e:
            await message.answer('–í–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞‚ùå\n\n'
                                 '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º creature —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–æ–º
    elif message.text.split('/')[0] == 'bi' and message.from_user.id in admins_id:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (int(message.text.split('/')[1]),))
        result = cursor.fetchone()

        cursor.execute("UPDATE users SET balance = ? WHERE tg_id = ?",
                       (int(result[1]) + int(message.text.split('/')[2]), int(message.text.split('/')[1])))
        conn.commit()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        await message.answer('–ë–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω‚úÖ')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif message.text.split('/')[0] == 'verify' and message.from_user.id in admins_id:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET verified = ? WHERE tg_id = ?",
                       (1, int(message.text.split('/')[1])))
        conn.commit()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω‚úÖ')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif message.text.split('/')[0] == 'blacklist' and message.from_user.id in admins_id and int(message.text.split('/')[1]) not in admins_id:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        cursor.execute("SELECT status FROM users WHERE tg_id = ?", (int(message.text.split('/')[1]),))

        result = cursor.fetchone()
        bl_user_status = result[0]

        # –ó–∞–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤ –Ω–µ–º –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
        if bl_user_status != 'blacklist':
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('blacklist', int(message.text.split('/')[1])))
            conn.commit()

            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è')
        # –ï—Å–ª–∏ –∂–µ –æ–Ω —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –±–µ–ª—ã–π
        else:
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""",
                           ('default', int(message.text.split('/')[1])))
            conn.commit()

            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫‚ö™Ô∏è')

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è /getid
    elif message.text == '/getid':
        await message.answer(f'–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º id: {message.from_user.id}')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞
    elif user_status == 'blacklist':
        await message.answer('–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è \n\n'
                             '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω!')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è /start
    elif message.text == '/start':
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM users WHERE tg_id = ?", (message.from_user.id,))
        count = cursor.fetchone()[0]

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        if not (count > 0):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω–∞—Ö
            # –°–æ–∑–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–ø—á—É
            random_emoji = random.choice(emojis)

            global elected_emoji
            elected_emoji = random_emoji

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            caption = f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {random_emoji}"

            await message.answer(caption, reply_markup=capture_keyboard)
        else:
            await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ‚úÖ', reply_markup=profile_keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    elif len(message.text.split(',')) == 2 and (message.from_user.id == first_tutor_id or message.from_user.id == second_tutor_id):

        acceptation_selling_code = ''.join([str(random.randint(1, 9)) for i in range(4)])
        seller_id = int(message.text.split(',')[0])
        selling_creature_id = int(message.text.split(',')[1])

        await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç—å‚úÖ')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É: {acceptation_selling_code}')

        if message.from_user.id == first_tutor_id:
            await bot.send_message(seller_id, f'–ù–∞—à–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—èüòå \n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ <b><i>–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i></b> \n\n{first_tutor_link}', parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(seller_id, f'–ù–∞—à–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—èüòå \n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ <b><i>–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i></b> \n\n{second_tutor_link}', parse_mode=ParseMode.HTML)

        await bot.send_message(seller_id, f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É Creature, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
                               parse_mode=ParseMode.HTML)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    elif message.from_user.id == seller_id:
        if message.text == acceptation_selling_code:
            await message.answer(f'Creature –ø—Ä–æ–¥–∞–Ω –∑–∞ {selling_price} —Ä—É–±–ª–µ–π‚úÖ')

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            cursor.execute("SELECT * FROM users WHERE tg_id = ?", (message.from_user.id,))
            result = cursor.fetchone()

            cursor.execute("UPDATE users SET balance = ? WHERE tg_id = ?", (int(result[1]) + selling_price, message.from_user.id))
            conn.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ creature
            cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (message.from_user.id,))
            result = cursor.fetchone()

            creature_own_ids = result[1].split(',')

            for i in range(len(creature_own_ids)):
                print(int(creature_own_ids[i]), selling_creature_id)
                if int(creature_own_ids[i]) == selling_creature_id:
                    del creature_own_ids[i]
                    break

            cursor.execute("UPDATE user_creature SET creature_list = ? WHERE user_id = ?",
                           (str(creature_own_ids).replace(' ', '').replace('[', '').replace(']', '').replace('\'', ''), message.from_user.id))
            conn.commit()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
            acceptation_selling_code = None
            selling_price = None
            seller_id = None
            selling_creature_id = None

            # –ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await show_profile_text_request(message)

        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏‚ùå')
            await message.answer('–ü—Ä–æ–¥–∞–∂–∞ Creature –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')

            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
            acceptation_selling_code = None
            selling_price = None
            seller_id = None
            selling_creature_id = None

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
    elif message.from_user.id == outputting_money_user_id:
        if message.text == acceptation_outputting_money_code:
            await message.answer(f'–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è‚úÖ')

            acceptation_outputting_money_code = None
            outputting_money_user_id = None
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏‚ùå')
            await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')

            acceptation_outputting_money_code = None
            outputting_money_user_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞
    elif user_status == 'depositing':
        deposit = message.text

        if deposit.isdigit():
            sum_to_increase_balance = int(deposit)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if not (deposit.isdigit()) or not (sum_to_increase_balance >= minimal_sum):
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –≤–≤–æ–¥ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞‚ùå\n\n'
                                 f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –Ω–∏–∂–µ {minimal_sum} RUB –∏ —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ')
        else:
            #await turn_off_depositing()

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('default', message.from_user.id))

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

            # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            caption = f'üí∏<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n' \
                      f'<b>–°—É–º–º–∞:</b>\n' \
                      f'{sum_to_increase_balance} RUB\n\n' \
                      f'<i>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞</i>'
            await message.answer(caption, parse_mode=ParseMode.HTML,
                                 reply_markup=way_to_increase_balance_inline_keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞
    elif user_status == 'outputmoney':
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (message.from_user.id,))
        result = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        output_money = message.text

        if output_money.isdigit():
            sum_to_increase_balance = int(output_money)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if not (output_money.isdigit()) or not (sum_to_increase_balance >= minimal_sum):
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –≤–≤–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞‚ùå\n\n'
                                 f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –Ω–∏–∂–µ {minimal_sum} RUB –∏ —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ')
        # –•–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        elif result[1] < sum_to_increase_balance:
            await message.answer('–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å, –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω‚ùå\n\n')

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('default', message.from_user.id))

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

            # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            await show_profile_text_request(message)
        else:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('requisites', message.from_user.id))

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

            # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            caption = f'üí∏<b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n' \
                      f'<i>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</i>\n\n' \
                      f'<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b>\n' \
                      f'Card'

            await message.answer(caption, parse_mode=ParseMode.HTML,
                                 reply_markup=back_to_profile_inline_keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    elif user_status == 'requisites':
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute("UPDATE users SET number_card = ? WHERE tg_id = ?", (message.text, message.from_user.id))
        conn.commit()

        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (message.from_user.id,))
        result = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        outputting_money_user_id = message.from_user.id

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
        cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('default', message.from_user.id))

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

        # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        await bot.send_message(first_tutor_id,
                               f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (telegram id: {message.from_user.id})'
                               f' c —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ {result[4]} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ {sum_to_increase_balance} RUB'
                               , parse_mode=ParseMode.HTML)

        acceptation_outputting_money_code = ''.join([str(random.randint(1, 9)) for i in range(4)])

        await bot.send_message(first_tutor_id,
                               f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {acceptation_outputting_money_code}',
                               parse_mode=ParseMode.HTML)

        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º', parse_mode=ParseMode.HTML)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞', parse_mode=ParseMode.HTML)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    elif user_status == 'selling':
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
        cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""", ('default', message.from_user.id))

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()

        # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        selling_money = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if not (selling_money.isdigit()):
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –≤–≤–æ–¥ —Ü–µ–Ω—ã –¥–ª—è creature‚ùå\n'
                                 '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ\n\n'
                                 '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –ø–æ user_id, –≥–¥–µ price –ø—É—Å—Ç–æ–π
            query = '''
                SELECT user_id, creature_id, price
                FROM exchanges
                WHERE user_id = ? AND price = ''
            '''

            cursor.execute(query, (message.from_user.id,))
            row = cursor.fetchone()

            # –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É
            if row:
                query = '''
                    DELETE FROM exchanges
                    WHERE user_id = ? AND creature_id = ?
                '''
                cursor.execute(query, (row[0], row[1]))
                conn.commit()

            cursor.close()
            conn.close()

            await show_profile_text_request(message)
        else:
            await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ –ø–æ–∏—Å–∫–µüîé')

            selling_price = int(selling_money)

            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            cursor.execute(f"SELECT * FROM exchanges WHERE user_id = ?", (message.from_user.id,))
            result = cursor.fetchall()

            print(result)

            try:
                id_creature = result[-1][1]
            except Exception as e:
                id_creature = result[1]

            cursor.execute("SELECT * FROM creatures WHERE id = ?", (id_creature,))
            result = cursor.fetchone()

            if selling_price <= 10000:
                await bot.send_message(first_tutor_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (telegram id: {message.from_user.id}) –≤—ã—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {selling_money} RUB Creature (creature id: {id_creature}):\n\n'
                                             f'üê≤ <b>Creature {result[2]} #{result[1]}</b>\n\n'
                                             f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                                             f'<b>‚î† </b>–ö–æ–ª–ª–µ–∫—Ü–∏—è: <b>{result[2]}</b>\n'
                                             f'<b>‚î† </b>–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{result[3]}</b>\n'
                                             f'<b>‚îñ </b>–¶–≤–µ—Ç: <b>{result[4]}\n</b>'
                                             f'<i>–¶–µ–Ω–∞ –≤ –±–æ—Ç–µ: {result[5]}</i>', parse_mode=ParseMode.HTML)

                await bot.send_message(first_tutor_id, f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –±–æ—Ç—É —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: telegram id, creature id', parse_mode=ParseMode.HTML)
            else:
                await bot.send_message(second_tutor_id,
                                       f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (telegram id: {message.from_user.id}) –≤—ã—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {selling_money} RUB Creature (creature id: {id_creature}):\n\n'
                                       f'üê≤ <b>Creature {result[2]} #{result[1]}</b>\n\n'
                                       f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                                       f'<b>‚î† </b>–ö–æ–ª–ª–µ–∫—Ü–∏—è: <b>{result[2]}</b>\n'
                                       f'<b>‚î† </b>–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{result[3]}</b>\n'
                                       f'<b>‚îñ </b>–¶–≤–µ—Ç: <b>{result[4]}\n</b>'
                                       f'<i>–¶–µ–Ω–∞ –≤ –±–æ—Ç–µ: {result[5]}</i>', parse_mode=ParseMode.HTML)

                await bot.send_message(second_tutor_id,
                                       f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –±–æ—Ç—É —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: telegram id, creature id',
                                       parse_mode=ParseMode.HTML)

            # –û–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º–µ–Ω–∏
            query = '''
                UPDATE exchanges
                SET price = ?
                WHERE user_id = ? AND price = ''
            '''

            cursor.execute(query, (selling_money, message.from_user.id))
            conn.commit()

            cursor.close()
            conn.close()

            await show_profile_text_request(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—á–∏
@router.callback_query(lambda query: query.data == "üêº")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üêº" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


@router.callback_query(lambda query: query.data == "üêµ")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üêµ" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


@router.callback_query(lambda query: query.data == "üê∏")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üê∏" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


@router.callback_query(lambda query: query.data == "üê∑")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üê∑" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


@router.callback_query(lambda query: query.data == "üê±")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üê±" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')


@router.callback_query(lambda query: query.data == "üê∂")
async def capture_animal_handler(callback: types.CallbackQuery):
    if "üê∂" == elected_emoji:
        await delete_last_messages(callback.message)
        await send_message_with_link(chat_id=callback.message.chat.id)
    else:
        await delete_last_messages(callback.message)
        await callback.message.answer('–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')
