# –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import sqlite3

# aiogram
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram import types

# –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
from handlers.users.different_functions import delete_last_messages
from handlers.users.profile import show_profile_callback_request
from keyboards.inline.inline_buttons import elemental_spirits_inline_keyboard, start_market_inline_keyboard, \
    celestial_guardians_inline_keyboard, mystical_beasts_inline_keyboard, legendary_creatures_inline_keyboard, aquatic_wonders_inline_keyboard, \
    mythical_figures_inline_keyboard, cryptic_oddities_inline_keyboard, dreamweavers_inline_keyboard
from loader import router, dp, bot


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ market
@router.callback_query(lambda query: query.data == "back_to_market")
async def back_to_market(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º market
    caption = f'üê≤<b> Creatures –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</b>\n\n' \
              f'<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é</i>'
    await callback.message.answer(caption, parse_mode=ParseMode.HTML, reply_markup=start_market_inline_keyboard)


@router.callback_query(lambda query: query.data == "creature_market")
async def creature_collection_handler(callback: types.CallbackQuery):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('data/database/database_shop.sqlite')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT status FROM users WHERE tg_id = ?", (callback.from_user.id,))

    result = cursor.fetchone()
    user_status = result[0]

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()

    if user_status != 'blacklist':
        await delete_last_messages(callback.message)

        caption = f'üê≤<b> Creatures –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</b>\n\n' \
                  f'<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é</i>'
        await callback.message.answer(caption, parse_mode=ParseMode.HTML, reply_markup=start_market_inline_keyboard)
    else:
        await callback.message.answer('–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è \n\n–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω!')


# –ü–æ–∫–∞–∑ creature –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data == "my_creature")
async def creature_collection_handler(callback: types.CallbackQuery):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('data/database/database_shop.sqlite')
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT status FROM users WHERE tg_id = ?", (callback.from_user.id,))

    result = cursor.fetchone()
    user_status = result[0]

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()

    if user_status != 'blacklist':
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (callback.from_user.id,))
        result_from_user_creature = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        if result_from_user_creature[1] == '':
            await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç Creaturesü§∑')
        else:
            await delete_last_messages(callback.message, number=2)

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            items = []

            for creature_id in result_from_user_creature[1].split(','):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
                cursor.execute("SELECT * FROM creatures WHERE id = ?", (creature_id,))
                result_from_creatures = cursor.fetchone()
                items.append(result_from_creatures)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
            item_buttons = {}

            for item in items:
                collection = item[2].replace('_', ' ')

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                button = types.InlineKeyboardButton(
                    text=f'{collection} #{item[1]} ({item[5]} RUB)',  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    callback_data=str(
                        ['m', item[0]])
                    .replace('[', '').replace(']', '').replace(',', '/').replace('\'', '')
                    .replace(' ', '').replace('n', '').replace('\\', '').replace('\"', '')
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
                item_buttons[item[0]] = button

            buttons = []

            for item_dict in item_buttons.values():
                buttons.append([item_dict])

            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data='back_to_profile')])

            my_creature_keyboard = types.InlineKeyboardMarkup(row_width=2, inline_keyboard=buttons,
                                              resize_keyboard=True,
                                              one_time_keyboard=True,
                                              input_field_placeholder="Choice a button",
                                              selective=True)

            caption = f'üê≤<b>Creatures –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:</b>'

            await callback.message.answer(caption, parse_mode=ParseMode.HTML, reply_markup=my_creature_keyboard)
    else:
        await callback.message.answer('–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è \n\n–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω!')


# –ù–∞–¥–ø–∏—Å—å –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
collection_caption = f'üê≤<b> Creatures –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</b>\n\n' \
          f'<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ Creature</i>'


# celestial_guardians
# ---{
@router.callback_query(lambda query: query.data == "celestial_guardians_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=celestial_guardians_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é celestial_guardians
@router.callback_query(lambda query: query.data == "back_to_celestialguardians")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=celestial_guardians_inline_keyboard)
# ---}


# mystical_beasts
# ---{
@router.callback_query(lambda query: query.data == "mystical_beasts_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=mystical_beasts_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é mystical_beasts
@router.callback_query(lambda query: query.data == "back_to_mysticalbeasts")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=mystical_beasts_inline_keyboard)
# ---}


# legendary_creatures
# ---{
@router.callback_query(lambda query: query.data == "legendary_creatures_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=legendary_creatures_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é legendary_creatures
@router.callback_query(lambda query: query.data == "back_to_legendarycreatures")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=legendary_creatures_inline_keyboard)
# ---}


# aquatic_wonders
# ---{
@router.callback_query(lambda query: query.data == "aquatic_wonders_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=aquatic_wonders_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é aquatic_wonders
@router.callback_query(lambda query: query.data == "back_to_aquaticwonders")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=aquatic_wonders_inline_keyboard)
# ---}


# mythical_figures
# ---{
@router.callback_query(lambda query: query.data == "mythical_figures_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=mythical_figures_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é mythical_figures
@router.callback_query(lambda query: query.data == "back_to_mythicalfigures")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=mythical_figures_inline_keyboard)
# ---}


# cryptic_oddities
# ---{
@router.callback_query(lambda query: query.data == "cryptic_oddities_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=cryptic_oddities_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é cryptic_oddities
@router.callback_query(lambda query: query.data == "back_to_crypticoddities")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=cryptic_oddities_inline_keyboard)
# ---}


# dreamweavers
# ---{
@router.callback_query(lambda query: query.data == "dreamweavers_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=dreamweavers_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é dreamweavers
@router.callback_query(lambda query: query.data == "back_to_dreamweavers")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=dreamweavers_inline_keyboard)
# ---}


# elemental_spirits
# ---{
@router.callback_query(lambda query: query.data == "elemental_spirits_collection")
async def creature_collection_handler(callback: types.CallbackQuery):
    await delete_last_messages(callback.message)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=elemental_spirits_inline_keyboard)


# –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é elemental_spirits
@router.callback_query(lambda query: query.data == "back_to_elementalspirits")
async def back_to_creature_collection(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_messages(callback.message, number=2)

    await callback.message.answer(collection_caption, parse_mode=ParseMode.HTML, reply_markup=elemental_spirits_inline_keyboard)
# ---}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ Callback Query –∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –û–ø–∏—Å–∞–Ω–∏—è creature
@router.callback_query()
async def item_creature_handler(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    callback_data = callback.data

    callback_data = callback_data.split('/')

    if callback_data[0] == 'market':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_last_messages(callback.message)
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM creatures WHERE id = ?", (callback_data[-1],))
        creature_info = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        creature_name = creature_info[3].replace('_', ' ')
        creature_collection = creature_info[2].replace('_', ' ')
        creature_place = creature_info[6].replace('_', ' ')

        caption = f'üê≤{creature_name} #{creature_info[1]}\n\n' \
                  f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n' \
                  f'‚î† –ö–æ–ª–ª–µ–∫—Ü–∏—è: {creature_collection}\n' \
                  f'‚î† –ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è: {creature_place}\n' \
                  f'‚îñ –¶–≤–µ—Ç: {creature_info[4]}\n\n' \
                  f'–¶–µ–Ω–∞: {creature_info[5]} RUB'

        album_builder = MediaGroupBuilder(
            caption=caption
        )
        album_builder.add(
            type="photo",
            media=FSInputFile(f"data/images/creatures/{callback_data[-1]}.jpg")
        )
        await callback.message.answer_media_group(
            # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
            media=album_builder.build()
        )

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (callback.from_user.id,))
        result_from_user_creature = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        if result_from_user_creature[1] is None:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            creature_buy_buttons = [
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                        callback_data=f'back_to_{callback_data[1].replace("_", "").lower()}'
                    ),
                    InlineKeyboardButton(
                        text="üõí–ö—É–ø–∏—Ç—å",
                        callback_data=f'buy/{callback_data[6]}/{callback_data[4]}/{callback.from_user.id}'
                    )
                ]
            ]
        elif callback_data[-1] in result_from_user_creature[1].split(','):
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            creature_buy_buttons = [
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                        callback_data=f'back_to_{creature_info[2].replace("_", "").lower()}'
                    ),
                    InlineKeyboardButton(
                        text="üõí–ü—Ä–æ–¥–∞—Ç—å",
                        callback_data=f'sell/{callback_data[-1]}/{creature_info[5]}/{callback.from_user.id}'
                    )
                ]
            ]
        else:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            creature_buy_buttons = [
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                        callback_data=f'back_to_{creature_info[2].replace("_", "").lower()}'
                    ),
                    InlineKeyboardButton(
                        text="üõí–ö—É–ø–∏—Ç—å",
                        callback_data=f'buy/{callback_data[-1]}/{creature_info[5]}/{callback.from_user.id}'
                    )
                ]
            ]

        creature_buy_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=creature_buy_buttons,
                                                           resize_keyboard=True,
                                                           one_time_keyboard=True,
                                                           input_field_placeholder="Choice a button",
                                                           selective=True)

        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', parse_mode=ParseMode.HTML, reply_markup=creature_buy_inline_keyboard)

    elif callback_data[0] == 'buy':
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (callback.from_user.id,))
        result = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        if int(result[1]) < int(callback_data[2]):
            await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å‚ùå')
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await delete_last_messages(callback.message, number=2)

            await callback.message.answer('–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–∏–º Creatureüéâ')

            # –í–æ–∑—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Ä–∫–µ—Ç
            caption = f'üê≤<b> Creatures –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</b>\n\n' \
                      f'<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é</i>'
            await callback.message.answer(caption, parse_mode=ParseMode.HTML, reply_markup=start_market_inline_keyboard)

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('data/database/database_shop.sqlite')
            cursor = conn.cursor()

            # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            cursor.execute(f"""
                UPDATE users
                SET balance = {int(result[1]) - int(callback_data[2])}
                WHERE tg_id = {callback.from_user.id};
            """)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (callback.from_user.id,))
            result_from_user_creature = cursor.fetchone()

            if result_from_user_creature[1] != '' and result_from_user_creature[1] is not None:
                user_creatures = result_from_user_creature[1].split(',')
                user_creatures.append(int(callback_data[1]))
            else:
                user_creatures = [int(callback_data[1])]

            creature_list_str = ','.join(str(creature_id) for creature_id in user_creatures)

            # –ò–∑–º–µ–Ω—è–µ–º creatures –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            cursor.execute(f"UPDATE user_creature SET creature_list = \'{creature_list_str}\' WHERE user_id = {callback.from_user.id};")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            conn.commit()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            cursor.close()
            conn.close()

    elif callback_data[0] == 'm':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_last_messages(callback.message, number=2)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM creatures WHERE id = ?", (callback_data[-1],))
        creature_info = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        creature_name = creature_info[3].replace('_', ' ')
        creature_collection = creature_info[2].replace('_', ' ')
        creature_place = creature_info[6].replace('_', ' ')

        caption = f'üê≤{creature_name} #{creature_info[1]}\n\n' \
                  f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n' \
                  f'‚î† –ö–æ–ª–ª–µ–∫—Ü–∏—è: {creature_collection}\n' \
                  f'‚î† –ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è: {creature_place}\n' \
                  f'‚îñ –¶–≤–µ—Ç: {creature_info[4]}'

        album_builder = MediaGroupBuilder(
            caption=caption
        )
        album_builder.add(
            type="photo",
            media=FSInputFile(f"data/images/creatures/{callback_data[-1]}.jpg")

        )
        await callback.message.answer_media_group(
            # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
            media=album_builder.build()
        )

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (callback.from_user.id,))
        result_from_user_creature = cursor.fetchone()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–≤–æ–∏–º–∏ creature
        creature_my_buttons = [
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                    callback_data='my_creature'
                ),
                InlineKeyboardButton(
                    text="üõí–ü—Ä–æ–¥–∞—Ç—å",
                    callback_data=f'sell/{callback_data[-1]}/{callback.from_user.id}'
                )
            ]
        ]

        creature_my_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=creature_my_buttons,
                                                       resize_keyboard=True,
                                                       one_time_keyboard=True,
                                                       input_field_placeholder="Choice a button",
                                                       selective=True)

        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', parse_mode=ParseMode.HTML,
                                      reply_markup=creature_my_inline_keyboard)

    elif callback_data[0] == 'sell':
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('data/database/database_shop.sqlite')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ
        cursor.execute("SELECT price FROM creatures WHERE id = ?", (callback_data[1],))
        creature_price = int(cursor.fetchone()[0])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (callback.from_user.id,))
        result = cursor.fetchone()

        cursor.execute("UPDATE users SET balance = ? WHERE tg_id = ?",
                       (int(result[1]) + creature_price, callback.from_user.id))
        conn.commit()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤
        cursor.execute("SELECT * FROM user_creature WHERE user_id = ?", (callback.from_user.id,))
        result = cursor.fetchone()

        creatures_own_ids = result[1].split(',')

        for i in range(len(creatures_own_ids)):
            print(int(creatures_own_ids[i]), callback_data[1])
            if int(creatures_own_ids[i]) == int(callback_data[1]):
                del creatures_own_ids[i]
                break

        cursor.execute("UPDATE user_creature SET creature_list = ? WHERE user_id = ?",
                       (str(creatures_own_ids).replace(' ', '').replace('[', '').replace(']', '').replace('\'', ''),
                        callback.from_user.id))
        conn.commit()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()

        await delete_last_messages(callback.message, number=2)

        await callback.message.answer(f'Creature –ø—Ä–æ–¥–∞–Ω –∑–∞ {creature_price} —Ä—É–±–ª–µ–π‚úÖ')

        await show_profile_callback_request(callback)
